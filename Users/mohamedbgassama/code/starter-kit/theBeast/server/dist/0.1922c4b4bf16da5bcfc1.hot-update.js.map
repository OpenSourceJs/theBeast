{"version":3,"sources":["webpack:///./server/middlewares/serverMiddleware.js","webpack:///./server/server.js"],"names":["server","use","cors","allowedHeaders","bodyParser","json","type","helmet","compression","cookieParser","logger","urlencoded","extended","expressValidator","expressSession","secret","resave","saveUninitialized","require","config","express","static","path","join","__dirname","middleware","dbconfig"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,yDAAe,kBAAU;AACvBA,SAAOC,GAAP,CACE,4CAAAC,CAAK;AACHC,oBAAgB,CACd,QADc,EAEd,kBAFc,EAGd,cAHc,EAId,QAJc,EAKd,qBALc;AADb,GAAL,CADF;AAWAH,SAAOC,GAAP,CACE,mDAAAG,CAAWC,IAAX,CAAgB;AACdC,UAAM;AADQ,GAAhB,CADF;AAKAN,SAAOC,GAAP,CAAW,8CAAAM,EAAX;AACAP,SAAOC,GAAP,CAAW,mDAAAO,EAAX;AACAR,SAAOC,GAAP,CAAW,qDAAAQ,EAAX;AACAT,SAAOC,GAAP,CAAW,8CAAAS,CAAO,UAAP,CAAX;AACAV,SAAOC,GAAP,CAAW,mDAAAG,CAAWO,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAX;AACAZ,SAAOC,GAAP,CAAW,yDAAAY,EAAX;AACAb,SAAOC,GAAP,CACE,uDAAAa,CAAe,EAAEC,QAAQ,KAAV,EAAiBC,QAAQ,KAAzB,EAAgCC,mBAAmB,KAAnD,EAAf,CADF;AAGD,CA1BD,E;;;;;;;;;;;;;;;;;;;ACVA,mBAAAC,CAAQ,QAAR,EAAkBC,MAAlB;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMnB,SAAS,+CAAAoB,EAAf;;AAGApB,OAAOC,GAAP,CAAW,+CAAAmB,CAAQC,MAAR,CAAe,4CAAAC,CAAKC,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAf,CAAX;;AAEA;AACA,sFAAAC,CAAWzB,MAAX;;AAEA;AACAA,OAAOC,GAAP,CAAW,SAAX,EAAsB,wEAAtB;AACAD,OAAOC,GAAP,CAAW,SAAX,EAAsB,wEAAtB;AACAD,OAAOC,GAAP,CAAW,UAAX,EAAuB,0EAAvB;;AAEA;AACA,iFAAAyB;;AAEA;AACA1B,OAAOC,GAAP,CAAW,sEAAX;AACAD,OAAOC,GAAP,CAAW,sEAAX;;AAEA,+DAAeD,MAAf,E","file":"0.1922c4b4bf16da5bcfc1.hot-update.js","sourcesContent":["import cors from 'cors';\nimport logger from 'morgan';\nimport helmet from 'helmet';\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport expressSession from 'express-session';\nimport expressValidator from 'express-validator';\n\n\nexport default server => {\n  server.use(\n    cors({\n      allowedHeaders: [\n        'Origin',\n        'X-Requested-With',\n        'Content-Type',\n        'Accept',\n        'token_authorization'\n      ]\n    })\n  );\n  server.use(\n    bodyParser.json({\n      type: '*/*'\n    })\n  );\n  server.use(helmet());\n  server.use(compression());\n  server.use(cookieParser());\n  server.use(logger('combined'));\n  server.use(bodyParser.urlencoded({ extended: true }));\n  server.use(expressValidator());\n  server.use(\n    expressSession({ secret: 'max', resave: false, saveUninitialized: false })\n  );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./server/middlewares/serverMiddleware.js","require('dotenv').config();\nimport express from 'express';\nimport path from 'path';\n\n\nimport middleware from './middlewares/serverMiddleware';\nimport { clientErr, serverErr } from './middlewares/errors';\nimport dbconfig from '../server/dbConfig/mongodb';\nimport signInRoute from './api/auth/routes/signin';\nimport signUpRoute from './api/auth/routes/signup';\nimport featureRoute from './api/feature/featureRoute';\n\nconst server = express();\n\n\nserver.use(express.static(path.join(__dirname, '../client/dist')));\n\n// middleware\nmiddleware(server);\n\n// api routes\nserver.use('/signup', signUpRoute);\nserver.use('/signin', signInRoute);\nserver.use('/feature', featureRoute);\n\n// mongodb\ndbconfig();\n\n// setup global handle errors\nserver.use(clientErr);\nserver.use(serverErr);\n\nexport default server;\n\n\n\n// WEBPACK FOOTER //\n// ./server/server.js"],"sourceRoot":""}